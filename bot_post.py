import asyncio
import logging
from datetime import datetime
from collections import defaultdict
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto

API_TOKEN = "8490692991:AAEREn6006SgYrGVcNv-4FOWTVTNE_1C23Y"
CHANNEL_ID = "@CosplayVibes"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_posts = defaultdict(dict)
media_groups = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–ª—å–±–æ–º–æ–≤


def preview_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="send_post")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post")]
    ])


@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏—à–ª–∏ —Ä–µ–ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ <b>https://t.me/ruruposts</b> ‚Äî –±–æ—Ç —Å–æ–±–µ—Ä—ë—Ç –ø–æ—Å—Ç –∏ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä."
    )


@dp.message(F.forward_from_chat)
async def handle_forwarded(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    user_id = message.from_user.id

    # –ê–ª—å–±–æ–º (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞)
    if message.media_group_id:
        mgid = message.media_group_id
        group = media_groups.setdefault(mgid, {
            "photos": [],
            "text": message.caption or "",
            "user_id": user_id,
            "last_update": datetime.now(),
        })

        if message.photo:
            group["photos"].append(message.photo[-1].file_id)
        group["last_update"] = datetime.now()
    else:
        # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
        photos = [message.photo[-1].file_id] if message.photo else []
        text = message.caption or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
        user_posts[user_id] = {"photos": photos, "text": text}
        await show_preview(user_id)


async def show_preview(user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    post = user_posts.get(user_id)
    if not post:
        return

    photos = post["photos"]
    text = post["text"]

    try:
        if len(photos) > 1:
            media = [
                InputMediaPhoto(media=photos[0], caption=text, parse_mode=ParseMode.HTML)
            ] + [InputMediaPhoto(media=p) for p in photos[1:]]
            await bot.send_media_group(chat_id=user_id, media=media)
            await bot.send_message(chat_id=user_id, text="üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:", reply_markup=preview_keyboard())
        elif len(photos) == 1:
            await bot.send_photo(chat_id=user_id, photo=photos[0], caption=text, reply_markup=preview_keyboard())
        else:
            await bot.send_message(chat_id=user_id, text=text, reply_markup=preview_keyboard())
    except Exception as e:
        await bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")


@dp.callback_query(F.data == "edit_text")
async def edit_text(callback: types.CallbackQuery):
    uid = callback.from_user.id
    if uid not in user_posts:
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    user_posts[uid]["editing"] = True
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (HTML —Ä–∞–∑—Ä–µ—à—ë–Ω):")
    await callback.answer()


@dp.message()
async def handle_edit(message: types.Message):
    uid = message.from_user.id
    if uid in user_posts and user_posts[uid].get("editing"):
        user_posts[uid]["text"] = message.text
        user_posts[uid]["editing"] = False
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await show_preview(uid)


@dp.callback_query(F.data == "send_post")
async def send_post(callback: types.CallbackQuery):
    uid = callback.from_user.id
    post = user_posts.get(uid)
    if not post:
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    photos, text = post["photos"], post["text"]

    try:
        if len(photos) > 1:
            media = [
                InputMediaPhoto(media=photos[0], caption=text, parse_mode=ParseMode.HTML)
            ] + [InputMediaPhoto(media=p) for p in photos[1:]]
            await bot.send_media_group(chat_id=CHANNEL_ID, media=media)
        elif len(photos) == 1:
            await bot.send_photo(chat_id=CHANNEL_ID, photo=photos[0], caption=text, parse_mode=ParseMode.HTML)
        else:
            await bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode=ParseMode.HTML)

        await callback.message.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
        del user_posts[uid]
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    await callback.answer()


@dp.callback_query(F.data == "cancel_post")
async def cancel_post(callback: types.CallbackQuery):
    uid = callback.from_user.id
    user_posts.pop(uid, None)
    await callback.message.answer("‚ùå –ü–æ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback.answer()


async def check_albums():
    """–°–ª–µ–¥–∏—Ç –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º–µ"""
    while True:
        now = datetime.now()
        ready = []

        for mgid, data in list(media_groups.items()):
            if (now - data["last_update"]).total_seconds() > 2:
                ready.append(mgid)

        for mgid in ready:
            data = media_groups.pop(mgid)
            uid = data["user_id"]
            user_posts[uid] = {"photos": data["photos"], "text": data["text"]}
            await show_preview(uid)

        await asyncio.sleep(2)


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.create_task(check_albums())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
